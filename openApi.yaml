openapi: 3.0.0
servers: 
  - description: SwaggerHub Group 5 Backend API
    url: HTTP
  - description: SwaggerHub Secure Groupd 5 Backend API
    url: HTTPS
info:
  description: Backend API
  version: “1.0.0“
  title: Backend API
  contact:
    email: woong.shin@integrify.io
  license: 
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

paths: 
  /products:
    get:
      summary: get the list of products
      description: get the list of products
      responses: 
        "200":
          description: get the product list successfully
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"

  /products/{productId}:
    get:
      summary: get the product by product id
      description: get the product by product id
      parameters:
        - name: productId
          required: true
          in: path
          description: id of the product
          schema:
            type: string
      responses:
        "200":
          description: the product with product id
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/Product"

    delete:
      summary: delete the product by product id
      description: delete the product by product id
      parameters:
        - name: productId
          required: true
          in: path
          description: id of the product
          schema: 
            type: string
      responses:
        "204":
          description: the product with product id is deleted successfully

  /users:
    get:
      summary: get the list of user
      description: get the list of user
      responses: 
        "200":
          description: get the user list  successfully
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

    post:
      summary: create a new user
      description: create a new user
      requestBody: 
        description: create a new user
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/User"
      responses: 
        "201":  
          description: create a new user successfully
          content: 
            application/json:
              schema: 
                $ref: "#/components/schemas/User"

  /users/{userId}:
    get:
      summary: get the user by user id
      description: get the user by user id
      parameters:
        - name: userId
          required: true
          in: path
          description: id of the user
          schema:
            type: string
      responses:
        "200":
          description: the user with user id successfully
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/User"

    put:
      summary: update the user with user id and user properties
      description: update the user with user id and user properties
      parameters:
        - name: userId
          required: true
          in: path
          description: id of the user
          schema:
            type: string
      requestBody:
        description: update the user
        content:
          application/json:
            schema:  
              $ref: "#/components/schemas/User"
      responses:
        "200": 
          description: updated the user successfully
          content:
            application/json:
              schema:  
                $ref: "#/components/schemas/User"

    delete:
      summary: delete the user with user id 
      description: update the user with user id
      parameters:
        - name: userId
          required: true
          in: path
          description: id of the user
          schema:
            type: string
      responses:
        "204": 
          description: deleted the user successfully              
      
  /users/forgetPassword:
    post:
      summary: send forget password request with user email
      description: send forget password request with user email
      requestBody:
        description: request forget password
        content:
          application/json:
            schema:  
              $ref: "#/components/schemas/PasswordReset"
      responses:
        "200": 
          description: reset password successfully
          content: 
            application/json:
              schema:
                type: string
                example: Reset password successfully

  /users/changePassword:
    post:
      summary: send change password request with userName, oldPassword, newPassword
      description: send change password request with userName, oldPassword, newPassword
      requestBody:
        description: request change password
        content:
          application/json:
            schema:  
              $ref: "#/components/schemas/PasswordUpdate"
      responses:
        "200": 
          description: change password successfully
          content: 
            application/json:
              schema:
                type: string
                example: Change password successfully

components: 
  schemas:
    Product: 
      type: object
      properties: 
        ID:  
          type: string
          example: 4
        name: 
          type: string
          example: Handmade Fresh Table
        description:  
          type: string
          example: "Andy shoes are designed to keeping in..."
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        variants:
          type: array
          items:
            $ref: '#/components/schemas/Variant'
        sizes:
          type: array
          items:
            $ref: '#/components/schemas/Size'

    Category:
      type: object  
      properties:
        name:
          type: string
          example: T-shirt

    Variant:
      type: string
      example: Red
    
    Size:
      type: string
      example: XL
    
    User:
      type: object
      properties:
        ID:
          type: string
          example: 133
        firstName:
          type: string
          example: "Jhon"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          example: "john@mail.com"
        userName:
          type: string
          example: "Jhon"
        password:
          type: string
          example: "password__not--real"

    PasswordReset:
      type: object
      properties:
        userEmail: 
          type: string
          example: user@mail.com
    
    PasswordUpdate:
      type: object
      properties:
        userName:
          type: string
          example: userName
        oldPassword:
          type: string
          example: oldPassword
        newPassword:
          type: string
          example: newPassword